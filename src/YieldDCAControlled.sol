// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity ^0.8.19;

import {SafeTransferLib} from "solady/utils/SafeTransferLib.sol";
import {ReentrancyGuard} from "solady/utils/ReentrancyGuard.sol";
import {IERC20} from "openzeppelin-contracts/interfaces/IERC20.sol";
import {IERC4626} from "openzeppelin-contracts/interfaces/IERC4626.sol";

import {CommonErrors} from "./common/CommonErrors.sol";
import {ISwapper} from "./interfaces/ISwapper.sol";
import {YieldDCABase} from "./YieldDCABase.sol";

/**
 * @title YieldDCAControlled
 * @notice Implements a Dollar Cost Averaging (DCA) strategy by utilizing the yield generated by an ERC4626 vault with role-based execution control.
 * @dev This contract automates the DCA strategy by regularly converting the yield generated by an ERC4626 vault into a specified ERC20 DCA token at regular intervals, called epochs. It uses a swapper contract to facilitate the exchange of yield for DCA tokens.
 *
 * ## Key Features
 * - **Position Management:** Allows users and their approved operators to open, close, increase, and reduce DCA positions represented by ERC721 tokens.
 * - **Automatic Yield Conversion:** Converts yield to DCA tokens at fixed intervals (epochs).
 * - **Position Tracking:** Tracks the yield generated from user positions and allocates DCA tokens accordingly.
 * - **Configurable Parameters:** Admins can configure epoch duration, minimum yield per epoch, discrepancy tolerance, and the swapper contract.
 * - **Role-Based Access Control:** Utilizes AccessControl for managing admin and keeper roles.
 *
 * ## Roles
 * - `DEFAULT_ADMIN_ROLE`: Manages configuration settings such as epoch duration, minimum yield per epoch, discrepancy tolerance, and the swapper contract.
 * - `KEEPER_ROLE`: Authorized to execute the DCA strategy at the end of each epoch.
 *
 * ## External Integrations
 * - **ERC4626 Vault:** Manages the underlying asset and generates yield.
 * - **ERC20 Token:** Acts as the target DCA token.
 * - **Swapper Contract:** Facilitates the exchange of yield for DCA tokens.
 *
 * ## Security Considerations
 * - **Input Validation:** Ensures all input parameters are valid and within acceptable ranges.
 * - **Reentrancy Guards:** Protects against reentrancy attacks using checks-effects-interactions pattern and reentrancy guards.
 * - **Access Control:** Restricts critical functions to authorized roles only.
 * - **Use of Safe Libraries:** Utilizes SafeCastLib and other safety libraries to prevent overflows and underflows.
 * - **Non-Upgradable:** The contract is designed to be non-upgradable to simplify security and maintainability.
 *
 * ## Usage
 * Users and their approved operators can open and manage positions using both direct interactions and ERC20 permit-based approvals. Positions are represented as ERC721 tokens, enabling easy tracking and management of each user's investments.
 */
contract YieldDCAControlled is YieldDCABase, ReentrancyGuard {
    using CommonErrors for address;
    using SafeTransferLib for address;

    /**
     * @notice Emitted when the swapper contract is updated by an admin.
     * @param admin The address of the admin who updated the swapper.
     * @param oldSwapper The address of the previous swapper contract.
     * @param newSwapper The address of the new swapper contract.
     */
    event SwapperUpdated(address indexed admin, address oldSwapper, address newSwapper);

    error SwapperAddressZero();

    bytes32 public constant KEEPER_ROLE = keccak256("KEEPER_ROLE");

    /**
     * @notice The address of the swapper contract used to exchange yield for DCA tokens.
     * @dev The swapper contract facilitates the exchange of assets during DCA execution.
     */
    ISwapper public swapper;

    constructor(
        IERC20 _dcaToken,
        IERC4626 _vault,
        ISwapper _swapper,
        uint32 _epochDuration,
        uint64 _minYieldPerEpochPercent,
        address _admin,
        address _keeper
    ) YieldDCABase(_dcaToken, _vault, _epochDuration, _minYieldPerEpochPercent, _admin, _keeper) {
        _setSwapper(_swapper);

        _grantRole(KEEPER_ROLE, _keeper);
    }

    /**
     * @notice Updates the address of the swapper contract used to exchange yield for DCA tokens.
     * @dev Restricted to admin role. The new swapper address must be a valid contract address.
     * @param _newSwapper The address of the new swapper contract.
     *
     * @custom:requirements
     * - `_newSwapper` must not be the zero address.
     * - caller must have the admin role.
     *
     * @custom:reverts
     * - `SwapperAddressZero` if `_newSwapper` is the zero address.
     * - `AccessControlUnauthorizedAccount` if the caller does not have the `DEFAULT_ADMIN_ROLE`.
     *
     * @custom:emits
     * - Emits {SwapperUpdated} event upon successful swapper update.
     */
    function setSwapper(ISwapper _newSwapper) external onlyAdmin {
        address oldSwapper = _setSwapper(_newSwapper);

        emit SwapperUpdated(msg.sender, oldSwapper, address(_newSwapper));
    }

    function _setSwapper(ISwapper _newSwapper) internal returns (address oldSwapper) {
        address(_newSwapper).revertIfZero(SwapperAddressZero.selector);
        oldSwapper = address(swapper);

        // revoke previous swapper's approval and approve new swapper
        if (oldSwapper != address(0)) address(asset).safeApprove(oldSwapper, 0);
        address(asset).safeApprove(address(_newSwapper), type(uint256).max);

        swapper = _newSwapper;
    }

    /**
     * @notice Executes the DCA strategy for the current epoch by converting yield into DCA tokens.
     * @dev Redeems yield from the vault, swaps it for DCA tokens using the swapper contract, updates the epoch information, and starts a new epoch.
     * @param _dcaAmountOutMin The minimum amount of DCA tokens expected from the swap.
     * @param _swapData The data required by the swapper contract to perform the swap.
     *
     * @custom:requirements
     * - The caller must have the KEEPER_ROLE.
     * - The epoch duration must have been reached.
     * - The yield must be sufficient to meet the minimum yield per epoch requirement.
     *
     * @custom:reverts
     * - `EpochDurationNotReached` if the epoch duration has not been reached.
     * - `InsufficientYield` if the yield is not sufficient to meet the minimum yield per epoch.
     * - `AmountReceivedTooLow` if the amount of DCA tokens received is below the minimum expected amount.
     *
     * @custom:emits
     * - Emits {DCAExecuted} event upon successful DCA execution.
     */
    function executeDCA(uint256 _dcaAmountOutMin, bytes calldata _swapData)
        external
        nonReentrant
        onlyRole(KEEPER_ROLE)
    {
        (uint256 yield, uint256 yieldInShares) = _redeemYield();

        // swap yield for DCA tokens
        uint256 amountOut = _buyDcaTokens(yield, _dcaAmountOutMin, _swapData);

        _updateEpoch(amountOut, yield, yieldInShares);
    }

    function _buyDcaTokens(uint256 _amountIn, uint256 _dcaAmountOutMin, bytes calldata _swapData)
        internal
        returns (uint256)
    {
        uint256 balanceBefore = dcaBalance();

        swapper.execute(address(asset), address(dcaToken), _amountIn, _dcaAmountOutMin, _swapData);

        uint256 balanceAfter = dcaBalance();

        if (balanceAfter < balanceBefore + _dcaAmountOutMin) revert AmountReceivedTooLow();

        unchecked {
            return balanceAfter - balanceBefore;
        }
    }
}
